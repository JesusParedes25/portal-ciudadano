import { buscarTramitesRelevantes, obtenerTodosTramites } from './busquedaTramites'

// API Key de OpenAI - DEBE configurarse en archivo .env
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || ''

// Obtener el total de tr√°mites en la base de datos
const TOTAL_TRAMITES = obtenerTodosTramites().length

/**
 * Genera el contexto para OpenAI basado en los tr√°mites relevantes
 */
function generarContexto(tramites) {
  if (tramites.length === 0) {
    return 'No se encontraron tr√°mites espec√≠ficos para esta consulta en la base de datos. Sugiere al usuario reformular su pregunta o contactar directamente a las oficinas gubernamentales.'
  }
  
  return tramites.map((tramite, index) => {
    // Oficinas con informaci√≥n completa
    const totalOficinas = tramite.atencion?.length || 0
    const oficinas = tramite.atencion?.slice(0, 3).map(oficina => {
      const direccion = oficina.direccion || 
        `${oficina.vialidad || ''} ${oficina.vialidadnombre || ''} ${oficina.noext || ''}, ${oficina.asentamientonombre || ''}, ${oficina.municipio || ''}`.trim()
      
      return `  ‚Ä¢ ${oficina.nombre}
    Direcci√≥n: ${direccion}
    Municipio: ${oficina.municipio || 'No especificado'}
    Tel√©fono: ${oficina.telefonos || 'No disponible'}
    Horario: ${oficina.horario || 'No especificado'}
    Correo: ${oficina.correo || 'No disponible'}`
    }).join('\n\n') || '  No hay oficinas registradas para este tr√°mite'
    
    // Mensaje especial si hay m√∫ltiples oficinas
    const mensajeOficinas = totalOficinas > 3 
      ? `\n\n‚ö†Ô∏è IMPORTANTE: Este tr√°mite tiene ${totalOficinas} oficinas disponibles. Solo muestro 3 aqu√≠. MENCIONA AL USUARIO que puede ver TODAS las oficinas y encontrar la m√°s cercana usando el mapa interactivo de la p√°gina.`
      : totalOficinas > 1
      ? `\n\nüí° TIP: Este tr√°mite tiene ${totalOficinas} oficinas. Sugiere al usuario que puede verlas en el mapa de la p√°gina para elegir la m√°s cercana.`
      : ''
    
    // URL del sistema en l√≠nea
    const tieneUrlSistema = tramite.urlsistema && tramite.urlsistema.trim() !== '' && tramite.urlsistema !== 'No aplica' && tramite.urlsistema !== 'ruts.hidalgo.gob.mx'
    const urlSistema = tieneUrlSistema 
      ? `\n‚û°Ô∏è TR√ÅMITE EN L√çNEA DISPONIBLE: ${tramite.urlsistema}` 
      : `\nüìç MODALIDAD: Presencial (acude a una oficina)`
    
    // Costo
    const costoInfo = tramite.concosto 
      ? `\nüíµ COSTO: $${tramite.costo} MXN` 
      : '\nüÜì GRATUITO (Sin costo)'
    
    // Requisitos formateados
    const requisitosFormatted = tramite.requisitos && tramite.requisitos.trim() !== ''
      ? tramite.requisitos.split('\n').filter(r => r.trim()).join('\n')
      : 'Los requisitos espec√≠ficos no est√°n detallados en la base de datos. Contacta la oficina para informaci√≥n completa.'
    
    // Informaci√≥n de contacto de la dependencia
    const contactoDependencia = tramite.dependencia?.correo 
      ? `\nüìß Correo dependencia: ${tramite.dependencia.correo}`
      : ''
    
    return `
================================================================================
TR√ÅMITE #${index + 1}: ${tramite.nombre}
================================================================================
üÜî ID del Tr√°mite: ${tramite.idtram}
üìã Tipo: ${tramite.tipo || 'No especificado'}
üè¢ Secretar√≠a: ${tramite.secretaria?.nombre || 'No especificada'}
üìç Dependencia: ${tramite.dependencia?.nombre || 'No especificada'}${contactoDependencia}${costoInfo}${urlSistema}

üìñ DESCRIPCI√ìN:
${tramite.descripcion || 'No hay descripci√≥n disponible'}

üìã REQUISITOS NECESARIOS:
${requisitosFormatted}

üèõÔ∏è OFICINAS DONDE REALIZAR EL TR√ÅMITE:
${oficinas}${mensajeOficinas}

üîó M√ÅS INFORMACI√ìN:
RUTS (Sistema oficial): https://ruts.hidalgo.gob.mx/ver/${tramite.idtram}

`
  }).join('\n')
}

/**
 * Env√≠a un mensaje al chatbot y obtiene una respuesta
 */
export async function sendChatMessage(userMessage, conversationHistory = []) {
  try {
    // Buscar tr√°mites relevantes
    const tramitesRelevantes = buscarTramitesRelevantes(userMessage)
    
    // Debug: mostrar tr√°mites encontrados
    console.log(`üîç B√∫squeda: "${userMessage}"`);
    console.log(`‚úÖ Encontrados ${tramitesRelevantes.length} tr√°mites relevantes:`);
    tramitesRelevantes.forEach((t, i) => {
      console.log(`  ${i + 1}. ${t.nombre} (ID: ${t.idtram})`);
    });
    
    const contexto = generarContexto(tramitesRelevantes)
    
    // Construir mensajes para OpenAI
    const messages = [
      {
        role: 'system',
        content: `Eres RutBot, un asistente virtual amigable del Gobierno del Estado de Hidalgo, M√©xico. 

Tu misi√≥n es ayudar a ciudadanos con informaci√≥n sobre tr√°mites y servicios del estado.

INFORMACI√ìN QUE MANEJAS:
- Tienes acceso a ${TOTAL_TRAMITES} tr√°mites del RUTS (Registro √önico de Tr√°mites y Servicios)
- El contexto abajo muestra los tr√°mites m√°s relevantes para cada consulta
- Usa la informaci√≥n del contexto como base, pero puedes complementarla cuando sea necesario

TU ESTILO:
- Natural y conversacional, como ayudar a un amigo
- Haz preguntas cuando necesites aclarar algo (ubicaci√≥n, tipo de tr√°mite, etc.)
- Organiza la informaci√≥n de forma clara: costo, modalidad, requisitos, oficinas
- Usa emojis con moderaci√≥n y Markdown para formato
- Si hay varias oficinas, pregunta la ubicaci√≥n del usuario para personalizarla respuesta
- Siempre cierra ofreciendo m√°s ayuda

CUANDO USES INFO DEL CONTEXTO:
- No mezcles datos entre diferentes tr√°mites
- Usa los costos y URLs exactos que aparecen
- Si falta informaci√≥n, puedes buscar en fuentes oficiales del gobierno de Hidalgo
- Menciona cuando uses informaci√≥n externa al contexto

SI NO ENCUENTRAS INFO:
- Busca en internet/p√°ginas oficiales del gobierno
- Menciona la fuente y recomienda verificar
- Sugiere contactar oficinas o visitar RUTS

IMPORTANTE SOBRE OFICINAS:
- Si hay 3+ oficinas y no conoces el municipio del usuario ‚Üí Pregunta primero
- Si conoces su ubicaci√≥n ‚Üí Muestra solo las oficinas cercanas
- Siempre menciona que pueden ver todas las oficinas en el mapa de la p√°gina

üìö INFORMACI√ìN DISPONIBLE:
${contexto}`
      },
      // Incluir el historial de conversaci√≥n (√∫ltimos 5 mensajes)
      ...conversationHistory.slice(-5).map(msg => ({
        role: msg.role,
        content: msg.content
      })),
      {
        role: 'user',
        content: userMessage
      }
    ]

    // Llamada a la API de OpenAI
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        temperature: 0.3, // Baja temperatura para respuestas m√°s precisas
        max_tokens: 1000
      })
    })

    if (!response.ok) {
      const errorData = await response.json()
      console.error('Error de OpenAI:', errorData)
      throw new Error(`Error de API: ${response.status}`)
    }

    const data = await response.json()
    return data.choices[0].message.content

  } catch (error) {
    console.error('Error en sendChatMessage:', error)
    throw error
  }
}

// Exportar funciones del servicio compartido
export { obtenerTramitePorId, obtenerTodosTramites, buscarTramitesRelevantes } from './busquedaTramites'
